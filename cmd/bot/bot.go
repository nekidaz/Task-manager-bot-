package bot

import (
	"gopkg.in/telebot.v3"
	"log"
	"math/rand"
	"strconv"
	"strings"
	"time"
	"upgrade/internal/models"
)

type UpgradeBot struct {
	Bot   *telebot.Bot
	Users *models.UserModel
	Tasks *models.TaskModel
}

var gameItems = [3]string{
	"–∫–∞–º–µ–Ω—å",
	"–Ω–æ–∂–Ω–∏—Ü—ã",
	"–±—É–º–∞–≥–∞",
}

var winSticker = &telebot.Sticker{
	File: telebot.File{
		FileID: "CAACAgIAAxkBAAEGMEZjVspD4JulorxoH7nIwco5PGoCsAACJwADr8ZRGpVmnh4Ye-0RKgQ",
	},
	Width:    512,
	Height:   512,
	Animated: true,
}

var loseSticker = &telebot.Sticker{
	File: telebot.File{
		FileID: "CAACAgIAAxkBAAEGMEhjVsqoRriJRO_d-hrqguHNlLyLvQACogADFkJrCuweM-Hw5ackKgQ",
	},
	Width:    512,
	Height:   512,
	Animated: true,
}

func (bot *UpgradeBot) StartHandler(ctx telebot.Context) error {
	newUser := models.User{
		Name:       ctx.Sender().Username,
		TelegramId: ctx.Chat().ID,
		FirstName:  ctx.Sender().FirstName,
		LastName:   ctx.Sender().LastName,
		ChatId:     ctx.Chat().ID,
	}

	existUser, err := bot.Users.FindOne(ctx.Chat().ID)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %v", err)
	}

	if existUser == nil {
		err := bot.Users.Create(newUser)

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %v", err)
		}
	}

	return ctx.Send("–ü—Ä–∏–≤–µ—Ç, " + ctx.Sender().FirstName)
}

func (bot *UpgradeBot) GameHandler(ctx telebot.Context) error {
	return ctx.Send("–°—ã–≥—Ä–∞–µ–º –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞ " +
		"–í–≤–µ–¥–∏ —Ç–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ /try –∫–∞–º–µ–Ω—å")
}

func (bot *UpgradeBot) TryHandler(ctx telebot.Context) error {
	attempts := ctx.Args()

	if len(attempts) == 0 {
		return ctx.Send("–í—ã –Ω–µ –≤–≤–µ–ª–∏ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç")
	}

	if len(attempts) > 1 {
		return ctx.Send("–í—ã –≤–≤–µ–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
	}

	try := strings.ToLower(attempts[0])
	botTry := gameItems[rand.Intn(len(gameItems))]

	if botTry == "–∫–∞–º–µ–Ω—å" {
		switch try {
		case "–Ω–æ–∂–Ω–∏—Ü—ã":
			ctx.Send(loseSticker)
			ctx.Send("ü™®")
			return ctx.Send("–ö–∞–º–µ–Ω—å! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!")
		case "–±—É–º–∞–≥–∞":
			ctx.Send(winSticker)
			ctx.Send("ü™®")
			return ctx.Send("–ö–∞–º–µ–Ω—å! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!")
		}
	}

	if botTry == "–Ω–æ–∂–Ω–∏—Ü—ã" {
		switch try {
		case "–∫–∞–º–µ–Ω—å":
			ctx.Send(winSticker)
			ctx.Send("‚úÇÔ∏è")
			return ctx.Send("–ù–æ–∂–Ω–∏—Ü—ã! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!")
		case "–±—É–º–∞–≥–∞":
			ctx.Send(loseSticker)
			ctx.Send("‚úÇÔ∏è")
			return ctx.Send("–ù–æ–∂–Ω–∏—Ü—ã! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!")
		}
	}

	if botTry == "–±—É–º–∞–≥–∞" {
		switch try {
		case "–Ω–æ–∂–Ω–∏—Ü—ã":
			ctx.Send(winSticker)
			ctx.Send("üìÉ")
			return ctx.Send("–ë—É–º–∞–≥–∞! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!")
		case "–∫–∞–º–µ–Ω—å":
			ctx.Send(loseSticker)
			ctx.Send("üìÉ")
			return ctx.Send("–ë—É–º–∞–≥–∞! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!")
		}
	}

	if botTry == try {
		return ctx.Send("–ù–∏—á—å—è!")
	}

	return ctx.Send("–ö–∞–∂–µ—Ç—Å—è –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!")
}

func InitBot(token string) *telebot.Bot {
	pref := telebot.Settings{
		Token:  token,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	b, err := telebot.NewBot(pref)

	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ %v", err)
	}

	return b
}

func (bot *UpgradeBot) AddTask(ctx telebot.Context) error {

	// –ø—Ä–∏–Ω–∏–º–∞—é —Ç–µ–∫—Å—Ç
	attems := strings.ReplaceAll(ctx.Text(), "/addTask", "")

	if attems == "" {
		return ctx.Send("–ù–∞–¥–æ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–∞–∫ /addTask –ó–∞–≥–æ–ª–æ–≤–∫ | –¢–µ–∫—Å—Ç | –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è\t –ù–∞–ø—Ä–∏–º–µ—Ä\t /addTask –°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑ | –ü–æ–π—Ç–∏ –≤ –º–∞–≥–∞–∑ –∑–∞ —Ö–ª–µ–±–æ–º :) | 19:30   ")
	}
	//—Ä–∞–∑–¥–µ–ª—è—é –Ω–∞ —á–∞—Å—Ç–∏ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫-–∑–∞–¥–∞—á–∞-–≤—Ä–µ–º—è
	task := strings.Split(attems, "|")

	if len(task) < 3 || len(task) > 3 {
		return ctx.Send("–ù–∞–¥–æ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–∞–∫ /addTask –ó–∞–≥–æ–ª–æ–≤–∫ | –¢–µ–∫—Å—Ç | –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è\t –ù–∞–ø—Ä–∏–º–µ—Ä\t /addTask –°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑ | –ü–æ–π—Ç–∏ –≤ –º–∞–≥–∞–∑ –∑–∞ —Ö–ª–µ–±–æ–º :) | 19:30   ")
	}

	title := task[0]
	description := task[1]
	endTime := task[2]

	if title == "" || description == "" || endTime == "" {
		return ctx.Send("–ù–∞–¥–æ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–∞–∫ /addTask –ó–∞–≥–æ–ª–æ–≤–∫ | –¢–µ–∫—Å—Ç | –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è\t –ù–∞–ø—Ä–∏–º–µ—Ä\t /addTask –°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑ | –ü–æ–π—Ç–∏ –≤ –º–∞–≥–∞–∑ –∑–∞ —Ö–ª–µ–±–æ–º :) | 19:30   ")
	}

	newTask := models.Tasks{
		Title:   title,
		Descr:   description,
		EndDate: endTime,
		Userid:  ctx.Chat().ID,
	}

	err := bot.Tasks.CreateTask(newTask)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è %v", err)
	}

	return ctx.Send("–∫–∞–∫ —Å–∫–∞–∂–µ—à—å:)")

}

func (bot *UpgradeBot) ShowTasks(context telebot.Context) error {

	tasksUser := &bot.Tasks
	_, tasksList := (*tasksUser).ShowTaskDb(context.Chat().ID)

	if len(tasksList) == 0 {
		return context.Send("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π ")
	}

	for i := 0; i < len(tasksList); i++ {
		context.Send(strconv.Itoa(i+1) + "." + tasksList[i].Title + ":" + tasksList[i].Descr)
	}

	return context.Send(tasksList)
}

func (bot *UpgradeBot) DeleteTask(context telebot.Context) error {

	tasksUser := &bot.Tasks

	apptemp := context.Args()

	if len(apptemp) > 1 || len(apptemp) < 1 {
		return context.Send("–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
	}

	askId, _ := strconv.ParseInt(context.Args()[0], 0, 64)

	if askId < 1 {
		return context.Send("–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
	}

	_, taskslist := (*tasksUser).ShowTaskDb(context.Chat().ID)

	if int(askId) > len(taskslist) {
		return context.Send("–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥")
	}

	if len(taskslist) == 0 {
		return context.Send("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π ")
	}

	(*tasksUser).DeleteTask(taskslist[askId-1].Id)

	return context.Send("–ó–∞–¥–∞–Ω–∏–µ : " + taskslist[askId-1].Title + ":  —É–¥–∞–ª–µ–Ω–æ")
}

func (bot *UpgradeBot) CommandsList(context telebot.Context) error {
	return context.Send("–ö–æ–º–∞–Ω–¥—ã:\n" +
		"1./addTasks\n" +
		"2./showTasks\n" +
		"3./deleteTask\n" +
		"3./deleteTask\n" +
		"4./game\n" +
		"5./try")
}
